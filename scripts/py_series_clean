#!/usr/bin/env python

import argparse
import py_series_clean.clean as pscc
import helpers.file_readers_and_writers as frw
import helpers.argument_parsers as ap
import helpers.input_validators as iv
import helpers.constants as constants
import numpy as np
import pdb

ADDITIONAL_HELP = 'iterations stop if the number of maximum iterations is exceeded or the series do not contain signal at the given treshold'

def check_share(value):
    """checks value that should be 0<x<=1"""
    number = iv.check_positive_float(value)
    if number <= 0 or number > 1:
        raise argparse.ArgumentTypeError("value must be > 0 and <= 1, but your's is %s" % value)
    return number

def parse_args():
    descr = 'Reads and analyzes file with time series'
    parser = argparse.ArgumentParser(description=descr)
    ap.parse_common_series_args(parser)
    parser.add_argument(
        '-t',
        required = True,
        help = 'detection treshold (aka X_q), see eq 48 and 152 in ref 2, can be esitmated using estimate_treshold script {}'.format(ADDITIONAL_HELP),
        metavar ='TRESHOLD',
        type = check_share
    )
    parser.add_argument(
        '-r',
        required = True,
        help = 'maximum number of iterations: {}'.format(ADDITIONAL_HELP),
        metavar ='MAX_ITERATIONS',
        type = iv.check_positive_int
    )

    parser.add_argument(
        '-g',
        required = True,
        help = 'share of the harmonic in the dirty spectrum, eq 156 ref 2 ',
        metavar ='HARONIC_SHARE',
        type = check_share
    )
    parser.add_argument(
        '-c',
        required = True,
        help='correlogram output file location, {}'.format(constants.OUTPUT_FORMAT_INFO),
        metavar='CORRELOGRAM_FILE'
    )
    parser.add_argument(
        '-s',
        required = True,
        help='cleaned time series output file location, {}'.format(constants.OUTPUT_FORMAT_INFO),
        metavar='SERIES_FILE'
    )
    parser.add_argument(
        '-o',
        required = True,
        help='summary output file location',
        metavar='SUMMARY_FILE'
    )
    args = parser.parse_args()
    return args

def save_results(restoration_result, args):
    """saves restoration results"""
    #TODO: output warning if max_iterations == iterations + 1, iterations start with zero

    if restoration_result:
        iterations, uniform_time_grid, clean_spectrum, correlogram, uniform_series = restoration_result
        frw.save_series([uniform_time_grid, correlogram], args.c, 'complex')
        frw.save_series([uniform_time_grid, uniform_series], args.s, 'complex')
    else:
        iterations = 0
    save_summary(args, iterations)

def save_summary(args, iterations):
    """writes summary to the output file"""
    file = open(args.o, "w")
    if iterations == 0:
        print('No harmonical components found', file=file)
    if iterations + 1 == args.r:
        print('Iterations did not converge, iterations where stopped because they reached maximum number of iterations', file=file)
    print('Input params:', file=file)
    print('khi: {}:'.format(args.k), file=file)
    print('treshold: {}:'.format(args.t), file=file)
    print('max iterations: {}:'.format(args.r), file=file)
    print('harmonic share: {}:'.format(args.g), file=file)
    print('dirty series file: {}:'.format(args.i), file=file)
    print('correlogram file: {}:'.format(args.c), file=file)
    print('clean series file: {}:'.format(args.s), file=file)
    print('summary file: {}:'.format(args.o), file=file)
    print('Output:', file=file)
    if iterations == 0:
        print('None')
    else:
        print('number of iterations: {}:'.format(iterations + 1), file=file)
    file.close()

def main():
    """entry point"""
    args = parse_args()
    time_grid_and_values = frw.read_file(args.i)
    restoration_result = pscc.clean(time_grid_and_values, args.k, args.t, args.r, args.g)
    save_results(restoration_result, args)

main()