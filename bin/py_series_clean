#!/usr/bin/env python

import argparse
import clean.wrapper as wrp
import helpers.file_readers_and_writers as frw
import helpers.argument_parsers as ap
import helpers.input_validators as iv
import helpers.constants as constants
from helpers.common_imports import *

ADDITIONAL_HELP = 'iterations stop if the number of maximum iterations is exceeded or the series do not contain signal at the given false alarm probability'

def parse_args():
    descr = 'Reads and analyzes file with time series'
    parser = argparse.ArgumentParser(description=descr)
    ap.parse_common_series_args(parser)
    parser.add_argument(
        '-t',
        required = True,
        help = 'detection treshold D_q eq 152 ref 2, can be esitmated using estimate_detection_treshold script {}'.format(ADDITIONAL_HELP),
        metavar ='DETECTION_TRESHOLD',
        type = iv.check_positive_float
    )
    parser.add_argument(
        '-r',
        required = True,
        help = 'maximum number of iterations: {}'.format(ADDITIONAL_HELP),
        metavar ='MAX_ITERATIONS',
        type = iv.check_positive_int
    )

    parser.add_argument(
        '-g',
        required = True,
        help = 'share of the harmonic in the dirty spectrum, eq 156 ref 2 ',
        metavar ='HARONIC_SHARE',
        type = iv.check_inclusion_in_unity
    )
    parser.add_argument(
        '-c',
        required = True,
        help='correlogram output file location, {}: time, value'.format(constants.OUTPUT_FORMAT_INFO),
        metavar='CORRELOGRAM_FILE'
    )
    parser.add_argument(
        '-s',
        required = True,
        help='cleaned time series output file location, {}: time, value'.format(constants.OUTPUT_FORMAT_INFO),
        metavar='SERIES_FILE'
    )
    parser.add_argument(
        '-p',
        required = True,
        help='cleaned spectrum output file location, {}: frequency, value'.format(constants.OUTPUT_FORMAT_INFO),
        metavar='SPECTRUM_FILE'
    )
    parser.add_argument(
        '-a',
        required = True,
        help='harmonics file, {}:linear frequency, amplitude, phase'.format(constants.OUTPUT_FORMAT_INFO),
        metavar='HARMONICS_FILE'
    )
    parser.add_argument(
        '-o',
        required = True,
        help='summary output file location',
        metavar='SUMMARY_FILE'
    )
    khi_default = 4
    khi_help = 'scale coefficient for the size of the dirty spectrum, see eq 147 in ref 2,'
    khi_help += ' default value is {}'.format(khi_default)
    parser.add_argument(
        '-k',
        required = False,
        help = khi_help,
        metavar ='KHI',
        default = khi_default,
        type = iv.check_positive_int
    )
    use_aver_default = False
    use_aver_help = 'use average distance between points on the time grid'
    use_aver_help += ' default value is {}, if set to False then minimum distance is used'.format(khi_default)
    parser.add_argument(
        '-u',
        required = False,
        help = use_aver_help,
        metavar ='USE_AVERAGE',
        default = use_aver_default,
        type = iv.str2bool
    )
    args = parser.parse_args()
    return args

def save_results(cleaning_result, args):
    """saves restoration results"""
    if cleaning_result:
        iterations = cleaning_result['iterations']
        frw.save_series(cleaning_result['uniform_time_grid'], cleaning_result['correlogram'], args.c, 'complex')
        frw.save_series(cleaning_result['uniform_time_grid'], cleaning_result['uniform_series'], args.s, 'complex')
        frw.save_series(cleaning_result['freq_vector'], cleaning_result['clean_spectrum'], args.p, 'complex')
        frw.save_harmonics(cleaning_result['frequencies'], cleaning_result['amplitudes'], cleaning_result['phases'], args.a)
    else:
        iterations = None
    save_summary(args, iterations)

def save_summary(args, iterations):
    """writes summary to the output file"""
    file = open(args.o, "w")
    if not iterations:
        print('No harmonical components found', file=file)
    if iterations == args.r:
        print('Iterations did not converge, iterations where stopped because they reached the maximum number of iterations', file=file)
    print('Input params:', file=file)
    print('khi: {}:'.format(args.k), file=file)
    print('detection treshold: {}:'.format(args.g), file=file)
    print('max iterations: {}:'.format(args.r), file=file)
    print('harmonic share: {}:'.format(args.g), file=file)
    print('dirty series file: {}:'.format(args.i), file=file)
    print('correlogram file: {}:'.format(args.c), file=file)
    print('clean series file: {}:'.format(args.s), file=file)
    print('clean spectrum file: {}:'.format(args.p), file=file)
    print('harmonics file: {}:'.format(args.a), file=file)
    print('summary file: {}:'.format(args.o), file=file)
    print('Output:', file=file)
    if not iterations:
        print('None', file=file)
    else:
        print('number of iterations: {}'.format(iterations), file=file)
    file.close()

def main():
    """entry point"""
    args = parse_args()
    time_grid_and_values = frw.read_file(args.i)
    wrapper = wrp.Wrapper(time_grid_and_values['time_grid'])
    cleaning_result = wrapper.clean(time_grid_and_values['values'], args.t, args.r, args.g, args.k, args.u)
    save_results(cleaning_result, args)

main()