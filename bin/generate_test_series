#!/usr/bin/env python
import generator.dirty_series as ds
import helpers.input_validators as iv
import helpers.constants as constants
import helpers.file_readers_and_writers as frw
import argparse
from helpers.common_imports import *

def parse_args():
    descr = 'Generates noisy periodical test series'
    parser = argparse.ArgumentParser(description=descr)
    parser.add_argument(
        '-o',
        required = True,
        help='output file location, {}: time, value'.format(constants.OUTPUT_FORMAT_INFO),
        metavar='OUTPUT'
    )
    parser.add_argument(
        '-l',
        required = True,
        help='time series length',
        metavar='SERIES_LENGTH',
        type = iv.check_positive_int
    )
    parser.add_argument(
        '-t',
        required = True,
        help='maximum time value',
        metavar='TIME_VAL',
        type = iv.check_positive_float
    )
    parser.add_argument(
        '-f',
        required = True,
        help='linear frequencies to generate periodical series, number of args must be the same as for phases',
        metavar='FREQS',
        type = iv.check_positive_float,
        nargs='+'
    )
    parser.add_argument(
        '-a',
        required = True,
        help='amplutdes to generate periodical series, number of args must be the same as for phases',
        metavar='AMPLITUDES',
        type = iv.check_positive_float,
        nargs='+'
    )
    parser.add_argument(
        '-p',
        required = True,
        help='phase (in radians) for respective periods to generate periodical series, number of args must be the same as for periods',
        metavar='PHASE',
        type = iv.check_positive_float,
        nargs='+'
    )
    parser.add_argument(
        '-s',
        required = True,
        help='sigma for normal distribution (to generate noise)',
        metavar='SIGMA',
        type = iv.check_positive_float
    )
    args = parser.parse_args()
    return args

def generate_series(args):
    """generate the series"""
    generator = ds.DirtySeries(
        args.l,
        args.t,
        args.f,
        args.a,
        args.p,
        args.s
    )
    result = generator.generate()
    return result

def main():
    """entry point"""
    args = parse_args()
    time_grid_and_values = generate_series(args)
    frw.save_series(time_grid_and_values['time_grid'], time_grid_and_values['values'], args.o, 'real')

main()